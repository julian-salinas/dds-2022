@startuml diagrama-de-clases

@startuml tp-qmp
'https://plantuml.com/class-diagram
' - private
' + public

' Part 1: Organizaciones y Miembros

enum TipoOrganizacion {
    GUBERNAMENTAL
    ONG
    EMPRESA
    INSTITUCION
}

class ClasificacionOrganizacion{
    - String nombre
}

class Organizacion {
    - String razonSocial
    - TipoOrganizacion tipo
    - Ubicacion ubicacion
    - List<Sector> sectores
    - ClasificacionOrganizacion clasificacion
    - List<DatosActividades> datosActividades

    + boolean containsSector(sector)
    + void agregarSector(sector)
    + void aceptarVinculacionDeTrabajador(miembro, sector)
    + void cargarMediciones(String pathCSV)
    + List<DatosActividades> getDatosActividades()
}

class DatosActividades {
    - TipoDeConsumo tipoDeConsumo
    - int valor
    - String periodicidad
    - String periodoImputacion

    + TipoDeConsumo encontrarTipo(String tipo)
}

class TipoDeConsumo {
  - Unidad unidad;
  - Actividad actividad;
  - Alcance alcance;
  - FactorEmision fe;

  + void cargarFactorEmision(FactorEmision fe)
} 

DatosActividades --> "1" TipoDeConsumo

class NoCoincidenUnidadesFEYTC extends RuntimeException {}

class CombustibleConsumidoGasoil extends TipoDeConsumo {}

class CombustibleConsumidoNafta extends TipoDeConsumo {}

class Diesel extends TipoDeConsumo{}

class DistanciaRecorrida extends TipoDeConsumo {}

class Electricidad extends TipoDeConsumo {}

class GasNatural extends TipoDeConsumo {}

class Transporte extends TipoDeConsumo {}

class Nafta extends TipoDeConsumo {}

class Carbon extends TipoDeConsumo {}

TipoDeConsumo --> NoCoincidenUnidadesFEYTC

class FactorEmision {
  - int valor;
  - Unidad unidad;

  + FactorEmision(int valor, Unidad unidad)
  + Unidad getUnidad() 
}

enum Unidad {
    M3,
    LT,
    KG,
    KWH,
    KM
}

enum Alcance {
  DIRECTAS, 
  INDIRECTAS_ELECTRICIDAD, 
  INDIRECTAS_EXTERNAS
}

enum Actividad {
  COMBUSTION_FIJA, 
  COMBUSTION_MOVIL, 
  ELECTRICIDAD, 
  LOGISTICA_PRODUCTOS_RESIDUOS
}

TipoDeConsumo --> "1" Alcance
TipoDeConsumo --> "1" Unidad
TipoDeConsumo --> "1" Actividad
TipoDeConsumo --> "1" FactorEmision

class Sector{
    - Organizacion orgAlaQuePertenezco
    - List<Miembro> miembros
    - List<Miembro> miembrosParaAceptar

    + boolean containsMiembro(miembro)
    + void agregarMiembro(miembro)
    + boolean containsMiembroParaAceptar(miembro)
    + void agregarMiembroParaAceptar(miembro)
    + void sacarMiembroParaAceptar(miembro)
}

class Miembro {
    - String nombre
    - String apellido
    - TipoDeDocumento tipo
    - Integer nroDocumento
    - Sector sectorDondeTrabaja
    - List<Trayecto> trayectos

    + void registrarTrayecto(trayecto)
    + void vincularTrabajadorConOrg(organizacion, sector)
}

enum TipoDeDocumento {
    DNI,
    LE,
    LC,
    CI
}

Miembro --> "1" TipoDeDocumento
Organizacion --> "1" TipoOrganizacion
Organizacion --> "1" ClasificacionOrganizacion
Organizacion --> "*" Sector
Organizacion --> "*" DatosActividades

Sector --> "1" Organizacion
Sector --> "*" Miembro
Miembro ---> "1" Sector


class Trayecto{
    - List<Tramo> tramos
    - Miembro miembroQueMeCargo

    + void agregarTramo(tramo)
    + int distanciaTotal(void)
    + List<Miembro> getMiembrosQueMeCargaron()
}

class TrayectoCompartido extends Trayecto {
  - List<Miembro> miembrosConLosQueComparto
  - List<Tramo> tramos
  - Miembro miembroQueMeCargo

  - void validacionTrayectoCompartido(Tramo tramo)
  + List<Miembro> getMiembrosQueMeCargaron()
  + void agregarTramo(Tramo tramo)
}

TrayectoCompartido --> "*" Miembro
TrayectoCompartido --> "*" Tramo

class Tramo{
    - MedioDeTransporte medioDeTransporte

    + int distancia(void)
    + TipoDeTransporte getTipo()
}

interface MedioDeTransporte {
    + int getDistancia(void)
    + TipoDeTransporte getTipoBase()
}

class TransportePublico implements MedioDeTransporte{
  - Parada paradaInicio;
  - Parada paradaFin;
  - TipoTransportePublico tipo;
  - Linea linea;
  - TipoDeTransporte tipoBase
    
  + boolean tipoYtipoDeLaLineaSonIguales(TipoTransportePublico tipo, Linea linea)
  + boolean paradasIncluidasEnLaLinea(Parada paradaInicio, Parada paradaFin, Linea linea)
  + void validacionesTransportePublico(TipoTransportePublico tipo, Linea linea, Parada paradaInicio, Parada paradaFin);
  + int getDistancia()
}

TransportePublico --> "1" TipoDeTransporte

class VehiculoParticular extends MedioNoPublico {

  - Ubicacion direccionInicio
  - Ubicacion direccionFin
  - TipoDeVehiculo tipoVehiculo
  - TipoDeCombustible tipoCombustible
  - TipoDeTransporte tipoBase

}

MedioNoPublico --> "1" TipoDeTransporte

class ServicioContratado extends MedioNoPublico{
  -Ubicacion direccionInicio
  - Ubicacion direccionFin
  - TipoServicioContratado tipo
  - TipoDeTransporte tipoBase
}


abstract class MedioNoPublico implements MedioDeTransporte {
  + Ubicacion getDireccionInicio()
  + Ubicacion getDireccionFin()
  + int getDistancia()
}

class Bicicleta extends MedioNoPublico{
  - Ubicacion direccionInicio;
  - Ubicacion direccionFin;
  - TipoDeTransporte tipoBase
}


class Pie extends MedioNoPublico {
    - Ubicacion direccionInicio
    - Ubicacion direccionFin
    - TipoDeTransporte tipoBase
}

enum TipoDeVehiculo{
    MOTO
    AUTO
    CAMIONETA
}

enum TipoDeTransporte {
  PUBLICO,
  PIE,
  BICICLETA,
  SERVICIO_CONTRATADO,
  VEHICULO_PARTICULAR
}

enum TipoDeCombustible{
    GNC,
    NAFTA,
    ELECTRICO,
    GASOIL
}

enum TipoTransportePublico{
    TREN
    SUBTE
    COLECTIVO
}

class Parada{
    - String nombre
    - Int distAproximaParada

    + int getDistAproximaParada(void)
}

class Linea {

  - String nombre
  - List<Parada> paradas
  - TipoTransportePublico tipo
  + boolean isTipo(TipoTransportePublico otroTipo)
  + boolean containsParada(Parada parada)
  + void agregarParada(Parada parada)
  + int distanciaEntreParadas(Parada paradaInicio, Parada paradaFin)
}

class TipoServicioContratado{
    - String nombre
}

ServicioContratado --> "1" TipoServicioContratado

Miembro  "1" --> "*" Trayecto
Trayecto --> "*" Tramo
Tramo --> "1" MedioDeTransporte
TransportePublico --> "1" TipoTransportePublico
TransportePublico --> "1" Linea
VehiculoParticular --> "1" TipoDeVehiculo
VehiculoParticular --> "1" TipoDeCombustible
TransportePublico --> "2" Parada
Linea --> "*" Parada
Linea --> "1" TipoTransportePublico


class Contrasenia {
    - List<Validacion> validaciones;

    + validarContrasenia(String contrasenia);
    + setValidaciones(Validacion ...validaciones);
}

class RuntimeException{}

interface Validacion {
    + boolean condicion(String contrasenia)
    + PasswordException error()
}

class PasswordException extends RuntimeException {
    + PasswordException()
}

Contrasenia "1" --> "*" Validacion
Validacion --> PasswordException



class ValidacionLongitud implements Validacion{
}

class ValidacionMayusculas implements Validacion{
}

class ValidacionMinusculas implements Validacion {
}

class ValidacionNumeros implements Validacion {
}

class ValidacionContraseniaComun implements Validacion {
}

class Administrador {
    - String nombreDeUsuario
    - Contrasenia contrasenia
}

Administrador "1" --> "1" Contrasenia

class Ubicacion {
  - String calle
  - int altura
  - Localidad localidad
  - ServicioGeoDds apiClient
  + Distancia calcularDistanciaA(Ubicacion otraUbicacion)
}

class Localidad {
  - int id
  - String nombre
  - ServicioGeoDds apiClient
}

Ubicacion --> "1" Localidad
Organizacion --> "1" Ubicacion
Organizacion --> "1" Ubicacion
MedioNoPublico --> "*" Ubicacion
ServicioContratado --> "*" Ubicacion
VehiculoParticular --> "*" Ubicacion
Bicicleta --> "*" Ubicacion
Pie --> "*" Ubicacion


interface RetrofitGeoDds {
  + Call<List<Pais>> paises(String token, int offset);
  + Call<List<Provincia>> provincias(String token, int offset);
  + Call<List<Provincia>> provincias(String token, int offset, int paisId);
  + Call<List<Localidad>> localidades(String token, int offset);
  + Call<List<Localidad>> localidades(String token, int offset, int municipioId);
  + Call<List<Municipio>> municipios(String token, int offset);
  + Call<List<Municipio>> municipios(String token, int offset, int provinciaId);
  + Call<Distancia> distancia(String token, int localidadOrigenId, String calleOrigen, int alturaOrigen, int localidadDestinoId, String calleDestino, int alturaDestino);
}

class ServicioGeoDds {
  - ServicioGeoDds instancia
  - String urlAPI
  - Retrofit retrofit
  - String apiKey

  + ServicioGeoDds getInstancia()
  + List<Pais> listadoDePaises(int offset)
  + List<Provincia> listadoDeProvincias(int offset)
  + List<Provincia> listadoDeProvincias(int offset, int paisId)
  + List<Municipio> listadoDeMunicipios(int offset)
  + List<Municipio> listadoDeMunicipios(int offset, int provinciaId)
  + List<Localidad> listadoDeLocalidades(int offset)
  + List<Localidad> listadoDeLocalidades(int offset, int idMunicipio)
  + distanciaEntreUbicaciones(Ubicacion origen, Ubicacion destino)
  + Map<String, Integer> mapPaises(int offset)
  + Map<String, Integer> mapProvincias(int offset)
  + Map<String, Integer> mapMunicipios(int offset)
  + Map<String, Integer> mapLocalidades(int offset)
  + void validarId(Integer id, String mensajeError)
  + int verificarNombrePais(String nombrePais)
  + int verificarNombreProvincia(String nombreProvincia)
  + int verificarNombreMunicipio(String nombreMunicipio)
  + int verificarNombreLocalidad(String nombreLocalidad)
}

ServicioGeoDds --> "1" RetrofitGeoDds
Ubicacion --> "1" ServicioGeoDds
Localidad --> "1" ServicioGeoDds

@enduml